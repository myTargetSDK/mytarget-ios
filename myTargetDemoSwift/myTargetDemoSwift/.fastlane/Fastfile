fastlane_require 'fileutils'

# update_fastlane
skip_docs
default_platform(:ios)

XCPROJECT = 'myTargetDemo.xcodeproj'.freeze
PLIST = 'myTargetDemo/Info.plist'.freeze
BUNDLE_ID = 'com.myTarget.demo'.freeze
TEAM_ID = 'A98KLPSGWM'.freeze
SCHEME = 'myTargetDemo'.freeze

lane :build do |options|
  # cocoapods(repo_update: true)
  if options[:simulator]
    build_ios_app(
      # project: XCPROJECT,
      clean: true,
      scheme: SCHEME,
      configuration: "Release",
      skip_package_ipa: true,
      skip_archive: true,
      skip_package_dependencies_resolution: true,
      destination: "generic/platform=iOS Simulator",
      xcargs: '-sdk iphonesimulator ' \
              "ENABLE_BITCODE=YES " \
              "SYMROOT='#{File.expand_path('..', Dir.pwd)}'"
    )
    zip(
      path: 'Release-iphonesimulator/myTargetDemo.app',
      output_path: 'myTargetDemo.zip'
    )
  else
    # enable_automatic_code_signing(path: XCPROJECT, team_id: TEAM_ID)
    build_ios_app(
      scheme: SCHEME,
      export_method: 'ad-hoc',
      export_team_id: TEAM_ID,
      skip_profile_detection: true,
      xcargs: "ENABLE_BITCODE=YES",
      skip_package_dependencies_resolution: true,
      export_options: {
        compileBitcode: false,
        signingStyle: 'manual',
        provisioningProfiles: { BUNDLE_ID => 'com.myTarget.demo_adHoc' }
      }
    )
  end
end

lane :modify_podspec do |options|
  release_sdk_path = "#{ENV['WORKSPACE']}/release/uploads/#{options[:sdk_ver]}/#{options[:build_ver]}"
  release_sdk_name = "mytarget-ios-sdk-#{options[:sdk_ver]}.#{options[:build_ver]}.zip"
  if options[:release]
    release_sdk_name = "mytarget-ios-sdk-#{options[:sdk_ver]}.zip"
  end
  release_sdk_zip = "#{release_sdk_path}/#{release_sdk_name}" 
  test_sdk_zip = "#{ENV['WORKSPACE']}/#{release_sdk_name}"
  if options[:release]
    test_sdk_zip = "#{ENV['WORKSPACE']}/mytarget-ios-sdk-#{options[:sdk_ver]}.#{options[:build_ver]}.zip"
  end

  if options[:release]
    podspec(sdk_ver:options[:sdk_ver])
  else
    podspec(sdk_ver:"#{options[:sdk_ver]}", build_number:"#{options[:build_ver]}")
  end
end

def push_sdk_to_adman(sdk_zip:, release_sdk_zip:)
  FileUtils.cp(release_sdk_zip, sdk_zip)
  adman = sh("cd #{ENV['WORKSPACE']} && find *.zip -type f -exec curl -s -i -X " \
             "PUT -T {} 'http://hp1.rbdev.mail.ru/upload/adman/temp/{}' \\;")
  raise 'push to adman => response_code != 200' unless adman.include?('200 OK')
end

def cp_framework(sdk_zip)
  sh("cd #{ENV['WORKSPACE']} && unzip -o #{sdk_zip} -d release/")
  framework = "#{ENV['WORKSPACE']}/myTarget/MyTargetTestApp/" \
              'MyTargetTestApp/ReleaseFrameworks'
  FileUtils.mkdir_p(framework)
  FileUtils.cp_r("#{ENV['WORKSPACE']}/release/MyTargetSDK.framework",
                 "#{framework}/MyTargetSDK.framework")
end

def podspec(sdk_ver:, build_number:)
  sdk_link = "file://#{ENV['WORKSPACE']}/release/uploads/#{sdk_ver}/#{build_number}/mytarget-ios-sdk-#{sdk_ver}.#{build_number}.zip"
  podspec_path = "#{ENV['WORKSPACE']}/myTargetSDK.podspec"
  spec = File.read(podspec_path)
  fixline = spec.lines.select { |l| l.include?('s.source') }.first
  spec.gsub!(fixline, "s.source = { :http => '#{sdk_link}' }\n")
  fixline = spec.lines.select { |l| l.include?('s.version') }.first
  spec.gsub!(fixline, "s.version = '#{sdk_ver}'\n")
  File.open(podspec_path, 'w+') { |f| f.write(spec) }
end

def podfile
  podfile_path = "#{ENV['WORKSPACE']}/myTargetDemoSwift/Podfile"
  podspec_path = "#{ENV['WORKSPACE']}/myTargetSDK.podspec"
  file = File.read(podfile_path)
  fixline = file.lines.select { |l| l.include?("pod 'myTargetSDK'") }.first
  file.gsub!(fixline, "pod 'myTargetSDK', :podspec => '#{podspec_path}'\n")
  File.open(podfile_path, 'w+') { |f| f.write(file) }
end
